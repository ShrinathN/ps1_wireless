#ifndef NRF24L01_H
#define NRF24L01_H

typedef unsigned char BYTE;

//register names
enum
{
	REG_CONFIG = 0x0,
	REG_EN_AA,
	REG_EN_RXADDR,
	REG_SETUP_AW,
	REG_SETUP_RETR,
	REG_RF_CH,
	REG_RF_SETUP,
	REG_STATUS,
	REG_OBSERVE_TX,
	REG_RPD,
	REG_RX_ADDR_P0,
	REG_RX_ADDR_P1,
	REG_RX_ADDR_P2,
	REG_RX_ADDR_P3,
	REG_RX_ADDR_P4,
	REG_RX_ADDR_P5,
	REG_TX_ADDR,
	REG_RX_PW_P0,
	REG_RX_PW_P1,
	REG_RX_PW_P2,
	REG_RX_PW_P3,
	REG_RX_PW_P4,
	REG_RX_PW_P5,
	REG_FIFO_STATUS,
	REG_DYNPD = 0x1c,
	REG_FEATURE
};

//register 0x0
enum
{
	CONFIG_MASK_RX_DR_ON = 0x0,
	CONFIG_MASK_RX_DR_OFF = 0x40
};

enum
{
	CONFIG_MASK_TX_DS_ON = 0x0,
	CONFIG_MASK_TX_DS_OFF = 0x20
};

enum
{
	CONFIG_MASK_MAX_RT_ON = 0x0,
	CONFIG_MASK_MAX_RT_OFF = 0x10
};

enum
{
	CONFIG_EN_CRC_LOW = 0x0,
	CONFIG_EN_CRC_HIGH = 0x8
};

enum
{
	CONFIG_CRCO_ONE_BYTE = 0x0,
	CONFIG_CRCO_TWO_BYTE = 0x4
};

enum
{
	CONFIG_PWR_UP_DOWN = 0x0,
	CONFIG_PWR_UP_UP = 0x2
};

enum
{
	CONFIG_PRIM_RX_PTX = 0x0,
	CONFIG_PRIM_RX_PRX = 0x1
};

//register 0x1
enum
{
	EN_AA_ENAA_P5_ENABLE = 0x20,
	EN_AA_ENAA_P4_ENABLE = 0x10,
	EN_AA_ENAA_P3_ENABLE = 0x8,
	EN_AA_ENAA_P2_ENABLE = 0x4,
	EN_AA_ENAA_P1_ENABLE = 0x2,
	EN_AA_ENAA_P0_ENABLE = 0x1
};

//register 0x2
enum
{
	EN_RXADDR_ERX_P5_ENABLE = 0x20,
	EN_RXADDR_ERX_P4_ENABLE = 0x10,
	EN_RXADDR_ERX_P3_ENABLE = 0x8,
	EN_RXADDR_ERX_P2_ENABLE = 0x4,
	EN_RXADDR_ERX_P1_ENABLE = 0x2,
	EN_RXADDR_ERX_P0_ENABLE = 0x1
};

//register 0x3
enum
{
	SETUP_AW_AW_3_BYTES = 0x1,
	SETUP_AW_AW_4_BYTES = 0x2,
	SETUP_AW_AW_5_BYTES = 0x3
};

//register 0x4
enum
{
	SETUP_RETR_ARD_250US = 0x0,
	SETUP_RETR_ARD_500US = 0x10,
	SETUP_RETR_ARD_750US = 0x20,
	SETUP_RETR_ARD_1000US = 0x30,
	SETUP_RETR_ARD_1250US = 0x40,
	SETUP_RETR_ARD_1500US = 0x50,
	SETUP_RETR_ARD_1750US = 0x60,
	SETUP_RETR_ARD_2000US = 0x70,
	SETUP_RETR_ARD_2250US = 0x80,
	SETUP_RETR_ARD_2500US = 0x90,
	SETUP_RETR_ARD_2750US = 0xa0,
	SETUP_RETR_ARD_3000US = 0xb0,
	SETUP_RETR_ARD_3250US = 0xc0,
	SETUP_RETR_ARD_3500US = 0xd0,
	SETUP_RETR_ARD_3750US = 0xe0,
	SETUP_RETR_ARD_4000US = 0xf0
};

enum
{
	SETUP_RETR_ARC_0 = 0x0,
	SETUP_RETR_ARC_1 = 0x1,
	SETUP_RETR_ARC_2 = 0x2,
	SETUP_RETR_ARC_3 = 0x3,
	SETUP_RETR_ARC_4 = 0x4,
	SETUP_RETR_ARC_5 = 0x5,
	SETUP_RETR_ARC_6 = 0x6,
	SETUP_RETR_ARC_7 = 0x7,
	SETUP_RETR_ARC_8 = 0x8,
	SETUP_RETR_ARC_9 = 0x9,
	SETUP_RETR_ARC_10 = 0xa,
	SETUP_RETR_ARC_11 = 0xb,
	SETUP_RETR_ARC_12 = 0xc,
	SETUP_RETR_ARC_13 = 0xd,
	SETUP_RETR_ARC_14 = 0xe,
	SETUP_RETR_ARC_15 = 0xf
};

//register 0x5
enum
{
	RF_CH_2400 = 0x0,
	RF_CH_2401 = 0x1,
	RF_CH_2402 = 0x2,
	RF_CH_2403 = 0x3,
	RF_CH_2404 = 0x4,
	RF_CH_2405 = 0x5,
	RF_CH_2406 = 0x6,
	RF_CH_2407 = 0x7,
	RF_CH_2408 = 0x8,
	RF_CH_2409 = 0x9,
	RF_CH_2410 = 0xa,
	RF_CH_2411 = 0xb,
	RF_CH_2412 = 0xc,
	RF_CH_2413 = 0xd,
	RF_CH_2414 = 0xe,
	RF_CH_2415 = 0xf,
	RF_CH_2416 = 0x10,
	RF_CH_2417 = 0x11,
	RF_CH_2418 = 0x12,
	RF_CH_2419 = 0x13,
	RF_CH_2420 = 0x14,
	RF_CH_2421 = 0x15,
	RF_CH_2422 = 0x16,
	RF_CH_2423 = 0x17,
	RF_CH_2424 = 0x18,
	RF_CH_2425 = 0x19,
	RF_CH_2426 = 0x1a,
	RF_CH_2427 = 0x1b,
	RF_CH_2428 = 0x1c,
	RF_CH_2429 = 0x1d,
	RF_CH_2430 = 0x1e,
	RF_CH_2431 = 0x1f,
	RF_CH_2432 = 0x20,
	RF_CH_2433 = 0x21,
	RF_CH_2434 = 0x22,
	RF_CH_2435 = 0x23,
	RF_CH_2436 = 0x24,
	RF_CH_2437 = 0x25,
	RF_CH_2438 = 0x26,
	RF_CH_2439 = 0x27,
	RF_CH_2440 = 0x28,
	RF_CH_2441 = 0x29,
	RF_CH_2442 = 0x2a,
	RF_CH_2443 = 0x2b,
	RF_CH_2444 = 0x2c,
	RF_CH_2445 = 0x2d,
	RF_CH_2446 = 0x2e,
	RF_CH_2447 = 0x2f,
	RF_CH_2448 = 0x30,
	RF_CH_2449 = 0x31,
	RF_CH_2450 = 0x32,
	RF_CH_2451 = 0x33,
	RF_CH_2452 = 0x34,
	RF_CH_2453 = 0x35,
	RF_CH_2454 = 0x36,
	RF_CH_2455 = 0x37,
	RF_CH_2456 = 0x38,
	RF_CH_2457 = 0x39,
	RF_CH_2458 = 0x3a,
	RF_CH_2459 = 0x3b,
	RF_CH_2460 = 0x3c,
	RF_CH_2461 = 0x3d,
	RF_CH_2462 = 0x3e,
	RF_CH_2463 = 0x3f,
	RF_CH_2464 = 0x40,
	RF_CH_2465 = 0x41,
	RF_CH_2466 = 0x42,
	RF_CH_2467 = 0x43,
	RF_CH_2468 = 0x44,
	RF_CH_2469 = 0x45,
	RF_CH_2470 = 0x46,
	RF_CH_2471 = 0x47,
	RF_CH_2472 = 0x48,
	RF_CH_2473 = 0x49,
	RF_CH_2474 = 0x4a,
	RF_CH_2475 = 0x4b,
	RF_CH_2476 = 0x4c,
	RF_CH_2477 = 0x4d,
	RF_CH_2478 = 0x4e,
	RF_CH_2479 = 0x4f,
	RF_CH_2480 = 0x50,
	RF_CH_2481 = 0x51,
	RF_CH_2482 = 0x52,
	RF_CH_2483 = 0x53,
	RF_CH_2484 = 0x54,
	RF_CH_2485 = 0x55,
	RF_CH_2486 = 0x56,
	RF_CH_2487 = 0x57,
	RF_CH_2488 = 0x58,
	RF_CH_2489 = 0x59,
	RF_CH_2490 = 0x5a,
	RF_CH_2491 = 0x5b,
	RF_CH_2492 = 0x5c,
	RF_CH_2493 = 0x5d,
	RF_CH_2494 = 0x5e,
	RF_CH_2495 = 0x5f,
	RF_CH_2496 = 0x60,
	RF_CH_2497 = 0x61,
	RF_CH_2498 = 0x62,
	RF_CH_2499 = 0x63,
	RF_CH_2500 = 0x64,
	RF_CH_2501 = 0x65,
	RF_CH_2502 = 0x66,
	RF_CH_2503 = 0x67,
	RF_CH_2504 = 0x68,
	RF_CH_2505 = 0x69,
	RF_CH_2506 = 0x6a,
	RF_CH_2507 = 0x6b,
	RF_CH_2508 = 0x6c,
	RF_CH_2509 = 0x6d,
	RF_CH_2510 = 0x6e,
	RF_CH_2511 = 0x6f,
	RF_CH_2512 = 0x70,
	RF_CH_2513 = 0x71,
	RF_CH_2514 = 0x72,
	RF_CH_2515 = 0x73,
	RF_CH_2516 = 0x74,
	RF_CH_2517 = 0x75,
	RF_CH_2518 = 0x76,
	RF_CH_2519 = 0x77,
	RF_CH_2520 = 0x78,
	RF_CH_2521 = 0x79,
	RF_CH_2522 = 0x7a,
	RF_CH_2523 = 0x7b,
	RF_CH_2524 = 0x7c,
	RF_CH_2525 = 0x7d
};

//register 0x6
enum
{
	RF_SETUP_CONT_WAVE = 0x80,
	RF_SETUP_PLL_LOCK = 0x10,
	RF_SETUP_DR_1MBPS = 0x0,
	RF_SETUP_DR_2MBPS = 0x8,
	RF_SETUP_DR_250KBPS = 0x20,
	RF_SETUP_RF_PWR_M18DBM = 0x0,
	RF_SETUP_RF_PWR_M12DBM = 0x2,
	RF_SETUP_RF_PWR_M6DBM = 0x4,
	RF_SETUP_RF_PWR_P0DBM = 0x6,
};

//register 0x7
enum
{
	STATUS_RX_DR_CLR = 0x40,
	STATUS_TX_DS_CLR = 0x20,
	STATUS_MAX_RT_CLR = 0x10
};

//function declarations
BYTE NRF_ReadRegister(BYTE regstr);
void NRF_WriteRegister(BYTE regstr, BYTE data);
void NRF_WriteTxFIFO(BYTE *data, BYTE length);
void NRF_ReadRxFIFO(BYTE * ptr, BYTE length);
void NRF_SetAddressTx(BYTE * ptr, BYTE length);
void NRF_SetAddressRx(BYTE * ptr, BYTE length, BYTE pipe_number);
void NRF_SetMode(BYTE mode);
BYTE NRF_ReadRxPayloadWidth();
void NRF_Init();

#endif